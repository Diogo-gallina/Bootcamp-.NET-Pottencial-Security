#Tuplas, Operador Ternário e Desconstrução de um Objeto com C#

##Tuplas na prática 

- Tuplas fornece sintaxe concisa para agrupar varios elementos de dados em uma estrutura de dados leve.

- Syntaxe:("Tipos dos dados (que podem ser quantos quiser)") variavel = ("Valores dos dados (Na ordem dos tipos)");
EX:
(int, string, string) tupla = (1, "Diogo", "Gallina");

- Syntaxe para mostrar tupla: Console.WriteLine(tupla."Item desejado");
EX:
Console.WriteLine($"id: {tupla.Item1}");


##Outra sintaxe da tupla

- Outras duas maneiras de representar uma tupla é com a sua propria palavra reservada ValueTuple e o var

- Syntaxe ValueTuple: ValueTuple<"Tipos dos dados (que podem ser quantos quiser)"> variavel = ("Valores dos dados (Na ordem dos tipos)");

- Syntaxe var: var variavel = Tuple.Create("Valores dos dados");

- Porém essas outras duas maneiras tem suas desvantagens, pois não é possivel nomear os tipos de dado o que pode ficar confuso
ao ler o código


##Tupla em métodos

- Métodos void não retonam nada, e caso queira retornar você deve criar um método especificando o tipo de dado, porém caso 
queira retornar mais de um tipo de dado em um método é necessário ultilizar tuplas

- Syntaxe método com tupla: public ("Tipos dos dados (que podem ser quantos quiser)") Nome do método(parametros ){}


##Descartes

- Quando você não precisa de uma informação de uma tupla é preciso descartar ela

- para descartar basta você colocar um "_" no lugar da variavel, pois o sistema entende que você esta trazendo a informação, 
porém não esta ultilizando

- Se descartar uma informção que está sendo ultilizada no código dará erro, pois o sistema não irá encontrar a variavel


##Desconstrutor/Deconstruct

- O desconstrutor é uma ação inversa do construtor, pois ele separa uma os objetos de uma construção

- Syntaxe deconstruct: public void Deconstruct(out "tipo de dado" variavel){}

- A diferença do construtor para o deconstruct é que ao inves da propriedade receber o nome, a variavel que recebe a propriedade

- syntaxe para instanciar um desconstrutor: ("tipo de dado" variavel) = variavel da instancia 


##IF ternario

- é uma alternativa do if que possibilita uma maior legibilidade do código

- O if ternario sempre deve conter um if e um else

- Syntaxe: ("Condição" ? "Caso true retorna isso" : "Caso false retorna isso")












 









