#Manipulando dados

##Introdução 

- Built-in functions são funções pré-existentes que auxiliam na manipulação de dados como por exemplo contar, somar, média, etc


##Usando o Count

- O COUNT conta quantas linhas tem em sua tabela de acordo com uma condição

- Syntaxe: SELECT COUNT(Condição) "Nome que você deseja dar para o tratamento"(opcional) FROM "Nome da tabela"
EX:
SELECT COUNT(*) QuantidadeProdutos FROM Produtos

- Ex de Count com where:
SELECT COUNT(*) QuantidadeProdutosTamanhoM FROM Produtos WHERE Tamanho = 'M'


##Usando o SUM

- O SUM soma a quantidade total de uma coluna

- Syntaxe SUM: SELECT SUM("Nome Coluna") "Nome de identificação" FROM "Nome tabela"
EX:
SELECT SUM(Preco) PrecoTotal FROM Produtos

- Ex de SUM com WHERE:
SELECT SUM(Preco) PrecoTotalProdutosTamanhoM FROM Produtos WHERE Tamanho = 'M'

- O SUM só aceita valores que são numeros 


##Usando o MIN, MAX e AVG

- O MAX serve para verificar qual é o maior valor de uma coluna 

- Syntaxe MAX:
SELECT MAX("Nome Coluna") "Nome de identificação" FROM "Nome tabela"
EX:
SELECT MAX(Preco) ProdutoMaisCaro From Produtos

- EX de MAX com WHERE:
SELECT MAX(Preco) ProdutoMaisCaroTamanhoM From Produtos WHERE Tamanho = 'M'

- O MIN serve para verificar qual é o menor valor de uma coluna

- Syntaxe MIN:
SELECT MIN("Nome Coluna") "Nome de identificação" FROM "Nome tabela"
EX:
SELECT MIN(Preco) ProdutoMaisBarato From Produtos

- EX de MIN com WHERE:
SELECT MIN(Preco) ProdutoMaisBaratoTamanhoM From Produtos WHERE Tamanho = 'M'

- O AVG calcúla a médio de uma tabela

- Syntaxe AVG:
SELECT AVG("Nome Coluna") "Nome de identificação" FROM "Nome tabela"
EX:
SELECT AVG(Preco) MediaProdutos From Produtos

- EX de AVG com WHERE:
SELECT AVG(Preco) MediaProdutosTamanhoM From Produtos WHERE Tamanho = 'M'


##Concatenando Colunas

- A concatenação na Linguagem SQL é ultilizada através do simbolo "+"

- Ex de concatenação: 
SELECT 
	Nome + ' - Cor: ' + Cor NomeProduto
FROM Produtos


##Upper e Lower

- O UPPER é um tratamento que deixa todas as letras da coluna maiúsclula

- Syntaxe UPPER:
SELECT UPPER("Nome da trabela") "Nome da coluna com tratamento" From "Nome tabela"

- O LOWER é um tratamento que deixa todas as letras da coluna minúscula

- Syntaxe LOWER:
SELECT LOWER("Nome da trabela") "Nome da coluna com tratamento" From "Nome tabela"


##Adicionando uma nova coluna

- Syntaxe criar coluna: ALTER TABLE "Nome da tabela" ADD "Nome da coluna que dejesa colocar" "Tipo de dado que a coluna aceita"

- Syntaxe para apagar coluna: ALTER TABLE "Nome da tabela" DROP COLUMN "Nome da coluna"


##Formatando uma data

- O comando FORMAT formata uma data para um padrão selecionado

- Syntaxe FORMAT: FORMAT("Nome da COluna", 'Formato desejado') Data
EX:
FORMAT(DataCadastro, 'dd/MM/yyyy HH:mm') Data


##Entendendo o Group By

- O group by é ultilizado para fazer uma contagem de todos os item que tem em uma coluna contando separadamente todos os iguais

- EX Syntaxe Group by:
SELECT 
	Tamanho,
	COUNT(*) Quantidade
FROM Produtos
GROUP BY Tamanho

- EX Syntaxe Group By com Where:
SELECT 
	Tamanho,
	COUNT(*) Quantidade
FROM Produtos
WHERE Tamanho <> ''
GROUP BY Tamanho

- <> assim como !=, significa diferente


## Primary Key e Foreign Key

- Primary Key ou PK: é a chave unica que identifica cada registro

- Foreign Key ou FK: é a chave que identifica um registro em outra tabela 


##Criando a tabela Endereços com FK

- Syntaxe para criar foreing Key:
CONSTRAINT "Nome da Relação das tabelas" FOREIGN KEY("Id que você ira referenciar na tabela")
REFERENCES "Nome da tabela que será referenciada"(Id)

EX:
CONSTRAINT FK_Enderecos_Clientes FOREIGN KEY(IdCliente)
REFERENCES Clientes(Id)


##Realizando um JOIN

- INNER JOIN é uma ação do select que serve para juntar duas tabelas que tem uma relação

- Syntaxe INNER JOIN:
SELECT 
*
FROM
	"Nome da Tabela"
INNER JOIN "Nome da Tabela que será unida" ON "Nome da 1ª tabela"."Coluna da relação(Normalmente o ID)" = "Nome da 2ª tabela"."Coluna da relação na segunda tabela(Normalmente o Id)"
WHERE "Nome da primeira Tabela".Id = "Numero do Id que você procura"

EX:
SELECT 
*
FROM
	Clientes
INNER JOIN Enderecos ON Clientes.Id = Enderecos.IdCliente
WHERE Clientes.Id = 4

- Existem outras maneiras de fazer um JOIN, o INNER é apenas uma delas que relaciona os dados de uma tabela com outra e cria 
uma nova tabela contendo todas os dados































