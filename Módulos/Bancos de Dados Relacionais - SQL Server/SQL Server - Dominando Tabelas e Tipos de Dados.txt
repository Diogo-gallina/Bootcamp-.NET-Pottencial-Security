#SQL SERVER - Dominando Tabelas e Tipos de Dados

##Introdução SQL

- SQL(Structure Query Language): É a linguagem de banco de dados usada para consulta e manipulação de dados

- A linguagem SQL tem 5 categorias de comandos:

* DDL - Data Definition Language
* DCL - Data Control Language
* DML - Data Manipulation Language
* TCL - Transaction Control Language
* DQL - Data Querry Language

- Comandos do DDL:
* Create - cria um bd ou uma tabela
* Drop - apaga um bd ou uma tabela
* Alter - altera uma tablea
* Truncate- apaga todos os dados de uma tabela

- Comandos do DCL:
* Grant - Garante acesso a uma tabela para determinados usuarios
* Revoke - revoga acessos

- Comandos do DML:
* Insert - insere um dado 
* Update - upa um dado em uma tabela
* Delete -  deleta dados de uma tabela

- Comandos do TCL:
* Commit - Serve para salvar dados de uma transação
* Rollback - Serve para salvar dados de uma transação
* Save Point - Serve como checkpoint da onde a transação parou

- Comandos do DQL:
*Select - seleciona dados de uma tabela


##Entendendo um database

- Database é uma coleção de dados estruturados, agrupados de forma concisa.`É composto de tabelas, procedures, views, etc


##Criando nossa tabela

- "f5" executa os comandos 

- Edit > IntelliSense > Refresh Local cache - Caminho para sua querry reconhecer tabelas criadas


##O comando select

- Syntaxe para mostra todos os dados da tabela: SELECT * FROM "Nome da tabela" 


##Ordenando os resultados

- Syntaxe para ordenar uma coluna em ordem alfabetica: ORDER BY "Nome da coluna"

- Syntaxe para ordenar uma coluna em ordem alfabetica decrescente: ORDER BY "Nome da coluna" DESC

- Syntaxe para ordenar duas colunas em ordem alfabetica respectivamente: ORDER BY "Nome da coluna", "Nome da coluna"
EX: ORDER BY Nome , Sobrenome 


##Selecionando colunas

- Syntaxe para escolher colunas especificas: SELECT "Nome da(s) coluna(s)" FROM "Nome da tabela" 

- Uma boa prática da linguagem SQL é ultilizar todos os comandos com letras maiúsculas


##Ultilizando o Where

- É ultilizada para filtrar dados

- O Where sempre deve ficar intes do Order By, Se não ele não funciona 

- Syntaxe Where: WHERE "Nome da coluna" = 'Dado que você deseja'
EX:
WHERE Nome = 'Adam'

- Syntaxe caso queira fazer um filtro mais especifico pesquisando dois ou mais dados de coluna:
WHERE "Nome da coluna" = 'Dado que você deseja' AND "Nome da coluna" = 'Dado que você deseja'
*EX:
 WHERE Nome = 'Adam' AND Sobrenome = 'Reynolds'

- Aspas simples servem somente para strings


##Ultilizando o Like

- O Like serve para fazer uma consulta que contém um caractere especifico

- EX para consultar uma lista de nomes que começam com a letra G
WHERE Nome LIKE 'G%'

- O porcentagem significa que não é importante os dados após ou antes os caracteres selecionados dependendo de onde esta o %

- Syntaxe WHERE "Nome da Coluna" Like 'caracteres que você procura%'


##Realizando insert

- Syntaxe: 
INSERT INTO "Nome da tabela" ("Colunas da tabela")
VALUES ("valores que deseja inserir, seguindo a ordem das colunas")

EX:
INSERT INTO Clientes (Nome, Sobrenome, Email, AceitaComunicados, DataCadastro)
VALUES ('Leonardo', 'Buta', 'email@email.com', 1, GETDATE())

- GETDATE Requeri a data e hora atual do insert

- Para executar apenas uma parte da sua querry basta você selecionar os comandos que deseja executar

- Para comentar código em SQL devese usar os caracteres '--'

- Para comentar diversas linhas basta usar o comando "Ctrl+K+C"


##Insert Omitindo as colunas

- INSERT INTO "Nome da tabela" VALUES ("Valores seguindo as colunas")

- Colocar as colunas de uma tabela em um insert não é obrigatório, porém os dados devem estar ordenados de acordo com as colunas,

- Porém é melhor deixar com as colunas para um reconhecimento visual


##Entendendo o ID

- O ID é o indentificador unico da coluna, mais conhecido na tabela como PK ou Primery Key

- Quando você defini um Id como Identity ele incrementa automaticamente o id


##Realizando um update

- O update altera algum dado de uma tabela

- Sempre que você for ultilizar um update é necessario ultilizar o where, pois você precisa especificar de qual id você quer 
alterar o dado

- Syntaxe:
UPDATE "Nome da tabela"
SET "Nome da Coluna"= 'alteração do dado'
WHERE Id = "Numero do Id que deve ser alterado"

EX:
UPDATE Clientes
SET Email = 'Email atualizado@email.com'
WHERE Id = 1003

- É capaz alterar mais de um campo

- O Update sempre deve sempre ser atualizado pelo Id


##Cuidados com update

- O update é extremamente destrutivo caso seja executado de forma errada, ainda mais sem  a claudaula where, pois você irá 
alterar todos os dados da coluna 

- BEGIN TRAN é um comando que te da a possibilidade de reverter alterações no banco

- Após ultilizar o BEGIN TRAN use o ROLLBACK que suas alterações voltarão como estava antes dos seus comandos


##Deletando um registro

- Syntaxe:
DELETE "Nome da tabela"
WHERE Id = "Id que deseja deletar"

- Assim como o update o DELETE também sempre deve ser executado com Where, pois caso você não coloca você apaga tudo, só 
ultilize DELETE sem WHERE caso tenha muita certeza que deseja apagar tudo


##Estudando Tipos de Dados e Criando uma tabela

- Os tipos mais comuns de serem usados em strings são o Char e o varchar

- O char(n) é um numero de caracteres fixo, ou seja ele só aceita a quantidade de caracteres selecionada

- O varchar(n) aceita té 8000 caracteres, porém da para você limitar a quantiade de caracteres max

- Os tipos numericos são iguais o do C#

- Tipos datetime:
* datetime: começa do ano 1753, até o ano 9999
* datetime: começa do ano 0001, até o ano 9999 (Mais recomendado e mais preciso)
* date: armazena apenas data
* time: armazena apenas hora

- O decimal é mais recomendavel para casos em que você ultiliza o dinheiro, pois é mais preciso e reconhece melhor com 
linguagens

- Syntaxe decimal: decimal("Numeros de digitos", "Casas Decimais")

- NOT NULL indica que o campo é obrigatório

- NULL incinua que o valor pode ser nulo

- EX de syntaxe para criar uma tabela:
CREATE TABLE Produtos (
	Id int IDENTITY(1,1) NOT NULL,
	Nome varchar(255) NOT NULL,
	Cor varchar(50) NULL,
	Preço decimal(13, 2) NOT NULL,
	Tamanho varchar (5) NULL,
	Genero char (1) NULL
)












































