#Nuget, Serializar e Atributos no C#

##Introdução gerenciador de pacotes

- Um pacote é um conjunto de códigos últeis, que possibilita o compartilhamento e reuso do código

- Nuget é o gerenciador de pacotes do .NET, que permite desenvolvedores compartilharem códigos e bibliotecas


##Explorando o nuget

- Na maioria dos casos de integrações, não é necessário escrever muioto código pois tem muita chance de ja existir algum pacote


##Instalando um pacote no projeto pelo VScode

- No VScode para baixar um pacote, você precisa instalar pelo metodo .NET CLI

- Você deve copiar o comando que aparecerá e instalar pelo terminal

- Se não for especificada a versão no comando, sempre será baixada a ultima versão

- As referencias de pacotes ficam no csproj


##Instalando um pacote pelo Visual Studio 

- Para acessar o nuget pelo visual Studio você deve clicar com o botão direito em cima da pasta do projeto e clicar na opção
"Manage NuGet Packages..."

- Após isso vá em Browse e pesquise o pacote desejavel

- Clique em instalar e esta pronto

- Porém caso queira baixar por comando, vá até o site do nuget, procure o pacote que você deseja e escolaha o método de 
instalação "Package Manager"

- Após isso vá no visual studio e siga o diretório   View > Other Windows > Package Manager Consoles

- Cole o link e de enter para instalar


##Introdução Serialização

- Oprocesso de serializar consiste em transformar objetos em um fluxi de bytes para seu armazenamento ou transmissão

- Um objeto só é reconhecido dentro de seu programa e caso tenha que transmitir para outro destino como um banco de dados
é necessário traduzir ele para a representação do banco de dados, esse processo é a serialização

- E o processo de deserialização é o caminho oposto disso

- JSON (JavaSript Notation Objetc) é um formato de texto que segue a sintaxe do JavaScript, muito usado para transmitir dados
entre aplicações

- Um formato JSON é um arquivo de texto que representa um objeto

- O JSON padroniza a troca de dados, pois o formato JSON é reconhecido em x linguagens diferentes  


##Serialização na prática

- Para serializar iremos usar a biblioteca Newtonsoft.Json que serve para serializar e descesializar informações

- A primeiro coisa a se fazer é importar o pacote na classe main com "using Newtonsoft.Json;"

- Syntaxe para serializar: string "variavel" = JsonConvert.SerializeObject("Variavel da instancia da classe que você deseja");

- DICA: Como programador sempre crie o custume de ler documentação tanto de linguagens como de pacotes, pois a documentação vai te 
ensinar a usar a linguagem ou pacote

- Para identar a demonstração da serialização uasasse o comando "Formatting.Indented" 


##Escrevendo um arquivo JSON

- Syntaxe para criar um arquivo.json: File.WriteAllText("Diretório que você deseja criar a pasta", Variavel);
EX:
File.WriteAllText("Arquivos/vendas.json", serializado);


##Serializando uma coleção

- Syntaxe: string variavel = JsonConvert.SerializeObject("Variavel da lista", Formatting.Indented);


##JSON Viewer

- As vezes o arquivo json que você vai trabalhar é invalido, para esses casos use o site "codebeautify.org" que serve para 
corrigir os erros do arquivo

- Além de corrigir erros, esse site também diminui o seu código caso esteja ocupando muita memória e converte para formatos como XML e CSV


##DataTime em Json

- Quando você representa uma data em um arquivo Json, o arquivo padroniza a data no formato ISO 8601 para se tornar um arquivo
independente e ser ultil em outras linguagens


##Deserializando um objeto

- Deserializar é o oposto dde serializar, ou seja um caso contrário, pois ao invés de você escrever o arquivo e mandar, você 
recebe um arquivo no formato Json e precisa refatoraç-lo para o formato da linguagem que você está ultilizando

- Antes de Deserializar um arquivo json, é necessário mapear o arquivo em uma classe com as propridades do arquivo

- Após estudar o arquivo e mapear todas suas propriedades, crie uma classe contendo todas as propriedades

- depois na casse main siga a syntaxe: string "variavel"= File.ReadAllText("Diretório do arquivo")
EX:
string contuoArquivo = File.ReadAllText("Arquivos/vendas.json");

- Caso o arquivo json seja uma coleção (Como é a maioria das vezes) você deve também criar uma lista na classe main e fazer 
um foreach para percorre-la
EX:
List<Venda> listaVenda = JsonConvert.DeserializeObject<List<Venda>>(conteudoArquivo);

foreach(Venda venda in listaVenda)
{
    Console.WriteLine($"Id: {venda.Id}, Produto: {venda.Produto}, Preço: {venda.Preco}, Data: {venda.DataVenda}");
}


##Atributos

- Caso ocorra de o cliente mandar um outro formato de nomeclatura fora do camelCase, ou PascalCase (Que é muito comum)
é necessário formata-lo para o tipo da convenção do C#

- Para esses casos é necessário ultilizar os atributos

- Antes de tudo importe o pacote de deserializar na classe que você esta ultilizando

- Depois vá ate a propriedade que está fora do padrão de convenção da sua linguagem e siga essa sintaxe:
[JsonProperty("Nome da propriedade(Como esta no arquivo JSON)")]

- O JsonProperty é um atributo que passa uma instrução adicional de comportamento para sua propriedade/Classe


















































